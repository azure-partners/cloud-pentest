import requests
from bs4 import BeautifulSoup
import ipaddress
from azure.mgmt.network import NetworkManagementClient
from azure.common.credentials import get_azure_cli_credentials
from azure.mgmt.resource import SubscriptionClient
from azure.mgmt.cdn import CdnManagementClient
from termcolor import cprint
from pprint import pprint

def downloadable_azure():
    link = BeautifulSoup(requests.get('https://microsoft.com/en-us/download/confirmation.aspx?id=56519').content, 'html.parser').find(id='c50ef285-c6ea-c240-3cc4-6c9d27067d6c')['href']
    data = requests.get(link).json()['values']
    data = [tag for tag in data if tag['name'] != 'AzureCloud']
    return {ipaddress.ip_network(ip): tag['name'] for tag in data for ip in tag['properties']['addressPrefixes']}

def discovery_azure(credential, subscription):
    network_client = NetworkManagementClient(credential, subscription)
    data = network_client.service_tags.list('eastus').values
    data = [tag for tag in data if tag.name != 'AzureCloud']
    return {ipaddress.ip_network(ip): tag.name for tag in data for ip in tag.properties.address_prefixes}

def discovery_cdn(credential, subscription):
    cdn_client = CdnManagementClient(credential, subscription)
    data = cdn_client.edge_nodes.list()
    return {ipaddress.ip_network(f"{ip.base_ip_address}/{ip.prefix_length}"): f"AzureContentDeliveryNetwork.{tag.name}" for tag in data for ip in tag.ip_address_groups[0].ipv4_addresses}

def get_azure_networks(verbose=True):
    global print_dbg
    print_dbg = lambda *x: cprint(*x) if verbose else None

    print_dbg(f"[-] Exporting Microsoft Whitelists", 'blue')
    credential = get_azure_cli_credentials(resource=None, with_tenant=False)[0]
    subscription = next(SubscriptionClient(credential).subscriptions.list()).subscription_id
    networks = downloadable_azure()
    print_dbg(f"Azure Whitelist was exported", 'green')
    networks |= discovery_cdn(credential, subscription)
    print_dbg(f"CDN Whitelist was exported", 'green')
    return networks
